#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <errno.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <assert.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <signal.h>
char *  ruta( char*  );
int  puerto( char * doc);
void * method( void* );

int main (int argc , char** argv){

	int port,opcion;	
	int val=1;
	int sd, bd,ad;
	int *sdc;
	char root[40]="/";
	char buff[2048];
	extern char *path;
	struct sockaddr_in server;
	memset(buff,0,sizeof buff);	

	while(1){
		opcion = getopt(argc,argv,"f:");
		switch(opcion){
			case 'f':
				port=puerto(argv[2]);
        			path=ruta(argv[2]);
				strcat(path,root);
			        strcpy(root,path);
			break;
			default:
				port=4000;
				path="/home/lucho/tp5/";

			break;
		}
	break;
	}	
	

	printf ("nro proceso %d , path %s\n", getpid(),path);	
	sd=socket(AF_INET,SOCK_STREAM,0);
	if (sd < 0){
		perror("fallo el socket");
		return -1;
	}
	pthread_t tid1;
	pthread_attr_t atributo;
	pthread_attr_init(&atributo);
	pthread_attr_setdetachstate(&atributo, PTHREAD_CREATE_DETACHED);

	server.sin_family = AF_INET;
	server.sin_port = htons(port);
	server.sin_addr.s_addr= INADDR_ANY;
	bzero(&(server.sin_zero),8);

	setsockopt(sd,SOL_SOCKET, SO_REUSEADDR,(void *)&val,sizeof(val));
	bd=bind (sd,(struct sockaddr*)&server, sizeof (server));
	if (bd < 0 ){
		perror("fallo el bind");
		return -1;	
	}

	listen (sd, 10000);

	signal(SIGCHLD,SIG_IGN);
	while ((ad=accept(sd,NULL,NULL)) > 0){
		if (ad < 0 ){
			perror("fallo el accept");
			return -1;
		}	
		sdc=malloc(sizeof (int));
		*sdc=ad;
		if ((pthread_create(&tid1,&atributo,&method,(void *)sdc))!=0){
			perror("pthread");
			return -1;
		}		
	}	
	return 0;
}
